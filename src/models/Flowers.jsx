/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Thomas Flynn (https://sketchfab.com/nebulousflynn)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/azaleas-isabella-plantation-richmond-park-188576acfe89480f90c38d9df9a4b19a
Title: Azaleas, Isabella Plantation, Richmond Park
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import flowers from '../assets/3D/flowers.glb'
import { a } from '@react-spring/three'

const Flowers = ({ isRotating, setIsRotating, ...props }) => {
    const { nodes, materials } = useGLTF(flowers)
    const flowersRef = useRef()
    const { gl, viewport } = useThree()
    const lastX = useRef(0)
    const rotationSpeed = useRef(0)
    const dampingFactor = 0.95
  
    const handlePointerDown = (e) => {
      e.stopPropagation()
      e.preventDefault()
      setIsRotating(true)
  
      const clientX = e.touches ? e.touches[0].clientX : e.clientX
  
      lastX.current = clientX
    }
  
    const handlePointerUp = (e) => {
      e.stopPropagation()
      e.preventDefault()
      setIsRotating(false)
  
      
    }
  
    const handlePointerMove = (e) => {
      e.stopPropagation()
      e.preventDefault()
  
      if (isRotating) {
        const clientX = e.touches ? e.touches[0].clientX : e.clientX
  
        const delta = (clientX - lastX.current) / viewport.width
  
        bubbleRef.current.rotation.y += delta * 0.01 * Math.PI
        lastX.current = clientX
        rotationSpeed.current = delta * 0.01 * Math.PI
      }
    }
  
    const handleKeyDown = (e) => {
      if (e.key === 'ArrowLeft') {
        if (!isRotating) setIsRotating(true)
        bubbleRef.current.rotation.y += 0.01 * Math.PI
      }
      else if (e.key === 'ArrowRight') {
        if (!isRotating) setIsRotating(true)
        bubbleRef.current.rotation.y -= 0.01 * Math.PI
      }
    }
  
    const handleKeyUp = (e) => {
      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
        setIsRotating(false)
      }
    }
  
    useFrame(() => {
      if (!isRotating) {
        rotationSpeed.current *= dampingFactor
  
        if (Math.abs(rotationSpeed.current) < 0.001) {
          rotationSpeed.current = 0
        }
      } else {
        const rotation = bubbleRef.current.rotation.y
  
        const normalizedRotation =
          ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
  
        // Set the current stage based on the island's orientation
        switch (true) {
          case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
            setCurrentStage(4);
            break;
          case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
            setCurrentStage(3);
            break;
          case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
            setCurrentStage(2);
            break;
          case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
            setCurrentStage(1);
            break;
          default:
            setCurrentStage(null);
        }
      }
    })
  
    useEffect(() => {
  
      const canvas = gl.domElement
      canvas.addEventListener('pointerdown', handlePointerDown)
      canvas.addEventListener('pointerup', handlePointerUp)
      canvas.addEventListener('pointermove', handlePointerMove)
      document.addEventListener('keydown', handleKeyDown)
      document.addEventListener('keyup', handleKeyUp)
  
      return () => {
        canvas.addEventListener('pointerdown', handlePointerDown)
        canvas.addEventListener('pointerup', handlePointerUp)
        canvas.addEventListener('pointermove', handlePointerMove)
        document.addEventListener('keydown', handleKeyDown)
        document.addEventListener('keyup', handleKeyUp)
      }
  
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])
  
    return (
    <a.group ref={flowersRef} {...props}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.5}>
        <group position={[-20.795, -8.754, -0.281]}>
          <points geometry={nodes.Object_2.geometry} material={materials['Scene_-_Root']} />
          <points geometry={nodes.Object_3.geometry} material={materials['Scene_-_Root']} />
          <points geometry={nodes.Object_4.geometry} material={materials['Scene_-_Root']} />
          <points geometry={nodes.Object_5.geometry} material={materials['Scene_-_Root']} />
          <points geometry={nodes.Object_6.geometry} material={materials['Scene_-_Root']} />
          <points geometry={nodes.Object_7.geometry} material={materials['Scene_-_Root']} />
        </group>
      </group>
    </a.group>
  )
}

useGLTF.preload('/azaleas_isabella_plantation_richmond_park.glb')

export default Flowers